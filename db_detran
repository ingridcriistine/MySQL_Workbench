-- Criação do banco de dados
CREATE DATABASE db_detran;
USE db_detran;

-- Tabela para registrar proprietários
CREATE TABLE Proprietarios (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(255) NOT NULL,
    cpf VARCHAR(11) UNIQUE NOT NULL,
    endereco VARCHAR(255),
    telefone VARCHAR(20),
    pontos_cartreira INT DEFAULT 0
);

-- Tabela para registrar veículos
CREATE TABLE Veiculos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    marca VARCHAR(255) NOT NULL,
    modelo VARCHAR(255) NOT NULL,
    placa VARCHAR(7) UNIQUE NOT NULL,
    ano INT,
    proprietario_id INT,
    FOREIGN KEY (proprietario_id) REFERENCES Proprietarios(id)
);

-- Tabela para registrar infrações de trânsito
CREATE TABLE Infracoes (
    id INT AUTO_INCREMENT PRIMARY KEY,
    descricao VARCHAR(255) NOT NULL,
    gravidade ENUM('Leve', 'Média', 'Grave', 'Gravíssima'),
    data_ocorrencia DATE NOT NULL,
    veiculo_id INT,
    FOREIGN KEY (veiculo_id) REFERENCES Veiculos(id)
);

-- Tabela para registrar licenciamentos dos veículos
CREATE TABLE Licenciamentos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    data_validade DATE NOT NULL,
    veiculo_id INT,
    FOREIGN KEY (veiculo_id) REFERENCES Veiculos(id)
);

-- Tabela para registrar multas aplicadas
CREATE TABLE Multas (
    id INT AUTO_INCREMENT PRIMARY KEY,
    valor DECIMAL(10, 2) NOT NULL,
    pontos INT DEFAULT 0,
    data_aplicacao DATE NOT NULL,
    infracao_id INT,
    FOREIGN KEY (infracao_id) REFERENCES Infracoes(id)
);

-- Inserção de dados nas tabelas
-- Proprietarios
INSERT INTO Proprietarios (nome, cpf, endereco, telefone) VALUES
('João Silva', '12345678901', 'Rua A, 123', '(11) 1234-5678'),
('Maria Oliveira', '98765432101', 'Rua B, 456', '(11) 9876-5432'),
('Carlos Souza', '11122233344', 'Rua C, 789', '(11) 1111-2222'),
('Ana Lima', '55566677788', 'Rua D, 1011', '(11) 5555-6666'),
('Pedro Costa', '99988877766', 'Rua E, 1213', '(11) 9999-8888');

-- Veiculos
INSERT INTO Veiculos (marca, modelo, placa, ano, proprietario_id) VALUES
('Fiat', 'Uno', 'ABC1234', 2020, 1),
('Volkswagen', 'Gol', 'DEF5678', 2018, 2),
('Chevrolet', 'Onix', 'GHI9101', 2021, 3),
('Ford', 'Ka', 'JKL1112', 2019, 4),
('Honda', 'Civic', 'MNO1314', 2022, 5),
('Toyota', 'Corolla', 'PQR1516', 2020, 1),
('Hyundai', 'HB20', 'STU1718', 2017, 2),
('Renault', 'Kwid', 'VWX1920', 2018, 3),
('Nissan', 'Versa', 'YZA2122', 2019, 4),
('Jeep', 'Compass', 'BCD2324', 2021, 5);

-- Infracoes
INSERT INTO Infracoes (descricao, gravidade, data_ocorrencia, veiculo_id) VALUES
('Excesso de velocidade', 'Média', '2024-04-20', 1),
('Estacionamento irregular', 'Leve', '2024-04-21', 2),
('Ultrapassagem em local proibido', 'Grave', '2024-04-22', 3),
('Falta de cinto de segurança', 'Leve', '2024-04-23', 4),
('Dirigir sob efeito de álcool', 'Gravíssima', '2024-04-24', 5),
('Uso de celular ao volante', 'Média', '2024-04-25', 6),
('Não respeitar a sinalização', 'Grave', '2024-04-26', 7),
('Estacionamento em vaga de idoso', 'Leve', '2024-04-27', 8),
('Falta de inspeção veicular', 'Grave', '2024-04-28', 9),
('Excesso de lotação', 'Média', '2024-04-29', 10);

-- Licenciamentos
INSERT INTO Licenciamentos (data_validade, veiculo_id) VALUES
('2024-04-30', 1),
('2023-05-01', 2),
('2023-05-02', 3),
('2024-05-03', 4),
('2023-05-04', 5),
('2024-05-05', 6),
('2025-05-06', 7),
('2012-05-07', 8),
('2022-05-08', 9),
('2008-05-09', 10);

-- Multas
INSERT INTO Multas (valor, pontos, data_aplicacao, infracao_id) VALUES
(150.00, 5, '2024-04-20', 1),
(100.00, 3, '2024-04-21', 2),
(500.00, 7, '2024-04-22', 3),
(80.00, 2, '2024-04-23', 4),
(2000.00, 10, '2024-04-24', 5),
(130.00, 4, '2024-04-25', 6),
(500.00, 7, '2024-04-26', 7),
(50.00, 2, '2024-04-27', 8),
(250.00, 6, '2024-04-28', 9),
(120.00, 4, '2024-04-29', 10);



show procedure status where db = 'db_detran';



-- Inserir um novo veículo e seu proprietário (com trigger) ------------------------------------------------------------------------------------------------------------------
DELIMITER //
create procedure inserir_veiculo(marca VARCHAR(255), modelo VARCHAR(255), placa VARCHAR(7), ano INT, proprietario_id int)
begin
	insert into veiculos values(default, marca, modelo, placa, ano, proprietario_id);
end
// DELIMITER ;

drop procedure inserir_veiculo;

call inserir_veiculo('Volkswagen', 'Gol', 'PQRSTU', 2020, 4);
select * from veiculos;


create table logNovoVeiculo (
	id int primary key not null auto_increment,
    marca varchar(255),
    modelo varchar(255),
    placa varchar(7),
    proprietario_id int
);

select * from logNovoVeiculo;

DELIMITER //
create trigger tg_logNovoVeiculo
after insert on veiculos
for each row
begin
	insert into logNovoVeiculo(marca, modelo, placa, proprietario_id) values (new.marca, new.modelo, new.placa, new.proprietario_id);
end
// DELIMITER ;

drop table logNovoVeiculo;


-- Deletar um veículo e suas multas associadas (com trigger) ------------------------------------------------------------------------------------------------------------------
DELIMITER //
create procedure deletar_veiculo(p_id int)
begin
    delete from multas where infracao_id in (select id from infracoes where veiculo_id = p_id) ;
    delete from infracoes where veiculo_id = p_id;
    delete from licenciamentos where veiculo_id = p_id;
    delete from veiculos where id = p_id;
end
// DELIMITER ;

drop procedure deletar_veiculo;

call deletar_veiculo(10);
select * from veiculos;
select * from infracoes;
select * from multas;

create table logVeiculoDeletado (
	id int primary key not null auto_increment,
    marca varchar(255),
    modelo varchar(255),
    placa varchar(7),
    proprietario_id int
);

select * from logVeiculoDeletado;

DELIMITER //
create trigger tg_logVeiculoDeletado
after delete on veiculos
for each row
begin
	insert into logVeiculoDeletado(marca, modelo, placa, proprietario_id) values (old.marca, old.modelo, old.placa, old.proprietario_id);
end
// DELIMITER ;

drop table logVeiculoDeletado;
drop trigger  tg_logVeiculoDeletado;


-- Inserir uma nova infração e atualizar multas associadas (com trigger) ------------------------------------------------------------------------------------------------------------------
DELIMITER //
create procedure inserir_infracao(descricao VARCHAR(255), gravidade ENUM('Leve', 'Média', 'Grave', 'Gravíssima'), data_ocorrencia DATE, veiculo_id INT)
begin
	insert into infracoes values(default, descricao, gravidade, data_ocorrencia, veiculo_id);
end
// DELIMITER ;

create table logNovaInfracao (
	id int primary key not null auto_increment,
    descricao varchar(255),
    gravidade ENUM('Leve', 'Média', 'Grave', 'Gravíssima'),
    data_ocorrencia DATE, 
    veiculo_id INT
);

select * from logNovaInfracao;

DELIMITER //
create trigger tg_logNovaInfracao
after insert on infracoes
for each row
begin
	insert into logNovaInfracao(descricao, gravidade, data_ocorrencia, veiculo_id) values 
    (new.descricao, new.gravidade, new.data_ocorrencia, new.veiculo_id);
end
// DELIMITER ;

drop trigger tg_logNovaInfracao;

call inserir_infracao('Estacionar veículo em acostamento', 'Leve', curdate(), 2);
select * from infracoes;


-- Atualizar pontos na carteira de um proprietário específico que levou uma multa(com trigger) ------------------------------------------------------------------------------------------------------------------
DELIMITER //
create procedure atualizar_pontos(p_id int)
begin
	update 
end
// DELIMITER ;

create table logNovaInfracao (
	id int primary key not null auto_increment,
    descricao varchar(255),
    gravidade ENUM('Leve', 'Média', 'Grave', 'Gravíssima'),
    data_ocorrencia DATE, 
    veiculo_id INT
);

select * from logNovaInfracao;

DELIMITER //
create trigger tg_logNovaInfracao
after insert on infracoes
for each row
begin
	insert into logNovaInfracao(descricao, gravidade, data_ocorrencia, veiculo_id) values 
    (new.descricao, new.gravidade, new.data_ocorrencia, new.veiculo_id);
end
// DELIMITER ;

drop trigger tg_logNovaInfracao;

call inserir_infracao('Estacionar veículo em acostamento', 'Leve', curdate(), 2);
select * from infracoes;



-- Deletar um proprietário e seus veículos associados (com trigger) ------------------------------------------------------------------------------------------------------------------
DELIMITER //
create procedure deletar_proprietario(p_id int)
begin
    delete from multas where infracao_id in (select id from infracoes where veiculo_id in (select id from veiculos where proprietario_id = p_id));
    delete from infracoes where veiculo_id in (select id from veiculos where proprietario_id = p_id);
    delete from licenciamentos where veiculo_id in (select id from veiculos where proprietario_id = p_id);
    delete from veiculos where id in (select id from veiculos where proprietario_id = p_id);
    delete from proprietarios where id = p_id;
end
// DELIMITER ;

drop procedure deletar_proprietario;

call deletar_proprietario(3);
select * from veiculos;
select * from infracoes;
select * from multas;
select * from proprietarios;

create table logProprietarioDeletado (
	id INT AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(255),
    cpf VARCHAR(11),
    telefone VARCHAR(20),
    pontos_cartreira INT DEFAULT 0
);

select * from logProprietarioDeletado;

DELIMITER //
create trigger tg_logProprietarioDeletado
after delete on proprietarios
for each row
begin
	insert into logProprietarioDeletado(nome, cpf, telefone, pontos_cartreira) values (nome.old, cpf.old, telefone.old, pontos_cartreira.old);
end
// DELIMITER ;


-- Selecionar veículos com licenciamento expirado ------------------------------------------------------------------------------------------------------------------
DELIMITER //
create procedure GetVeiculosLicenciamentoExpirado(p_ano date)
begin
	select 
		v.modelo as 'veiculo',
        v.placa as 'placa',
        l.data_validade
		
        from licenciamentos l
        inner join veiculos v
        on l.veiculo_id = v.id
        
        where l.data_validade < p_ano;
end
// DELIMITER ;

drop procedure  GetVeiculosLicenciamentoExpirado;
call GetVeiculosLicenciamentoExpirado('2023-01-01');


-- Selecionar veículos que possuem multas graves ------------------------------------------------------------------------------------------------------------------
DELIMITER //
create procedure GetVeiculosMultas(p_gravidade enum('Leve','Média','Grave','Gravíssima'))
begin
	select 
		v.modelo as 'veiculo',
        v.placa as 'placa',
        i.data_ocorrencia,
        i.gravidade 
		
        from infracoes i
        inner join veiculos v
        on i.veiculo_id = v.id
        
        where i.gravidade = p_gravidade;
end
// DELIMITER ;

call GetVeiculosMultas('Grave');


-- Selecionar veículos acima de 2021 ------------------------------------------------------------------------------------------------------------------
DELIMITER //
create procedure GetVeiculosAno(p_ano int)
begin
	select 
		v.modelo as 'veiculo',
        v.placa,
        v.ano
		
        from veiculos v
        
        where v.ano > p_ano;
end
// DELIMITER ;

drop procedure  GetVeiculosAno;
call GetVeiculosAno(2021);


-- Selecionar multas de veículos abaixo de 2020 ------------------------------------------------------------------------------------------------------------------
DELIMITER //
create procedure GetMultasVeiculosAno(p_ano int)
begin
	select 
		v.modelo as 'veiculo',
        v.placa,
        v.ano,
        i.multas
		
        from infracoes i
        inner join veiculos v
        on i.veiculo_id = v.id
        
        where v.ano > p_ano;
end
// DELIMITER ;

drop procedure  GetVeiculosAno;
call GetVeiculosAno(2021);


-- Inserir um novo proprietário ------------------------------------------------------------------------------------------------------------------
DELIMITER //
create procedure inserir_proprietario(nome VARCHAR(255), cpf VARCHAR(11), endereco VARCHAR(255), telefone VARCHAR(20))
begin
	insert into proprietarios values(default, nome, cpf, endereco, telefone, default);
end
// DELIMITER ;

drop procedure inserir_proprietario;

call inserir_proprietario('Ingrid Rocha', '1234678', 'Rua F, 1000', '(41) 9999-9999');
select * from proprietarios;


-- Atualizar informações de um proprietário ------------------------------------------------------------------------------------------------------------------
DELIMITER //
create procedure atualizar_proprietario(p_id int, nome VARCHAR(255), cpf VARCHAR(11), endereco VARCHAR(255), telefone VARCHAR(20))
begin
	update proprietarios
    set nome = nome,
    cpf = cpf,
    endereco = endereco,
    telefone = telefone
    where id = p_id;
end
// DELIMITER ;

call inserir_proprietario('aaaaaa', '1235203', 'Rua G, 1880', '(41) 9999-9999');
call atualizar_proprietario(7, 'Mari Marques', '1235203', 'Rua G, 1880', '(41) 9999-9999');
select * from proprietarios;


-- Deletar um proprietário ------------------------------------------------------------------------------------------------------------------
set sql_safe_updates = 0;

alter table proprietarios
add column status_usuario enum('Ativo', 'Inativo');
update proprietarios
set status_usuario = 'Ativo';

DELIMITER //
create procedure deletar_proprietario(p_id int)
begin
	update proprietarios
    set status_usuario = 2
    where id = p_id;
end
// DELIMITER ;

drop procedure deletar_proprietario;

call deletar_proprietario(3);
select * from proprietarios;


-- Selecionar todos os proprietários ------------------------------------------------------------------------------------------------------------------
DELIMITER //
create procedure GetProprietarios()
begin
	select * from proprietarios;
end
// DELIMITER ;

call GetProprietarios();


-- Inserir uma nova infração ------------------------------------------------------------------------------------------------------------------
DELIMITER //
create procedure inserir_infracao(descricao VARCHAR(255), gravidade ENUM('Leve', 'Média', 'Grave', 'Gravíssima'), data_ocorrencia DATE, veiculo_id INT)
begin
	insert into infracoes values(default, descricao, gravidade, data_ocorrencia, veiculo_id);
end
// DELIMITER ;

call inserir_infracao('Estacionar veículo afastado entre 50 centímetros e 1 metro do meio fio', 'Leve', curdate(), 2);
select * from infracoes;


-- Atualizar informações de uma infração ------------------------------------------------------------------------------------------------------------------
DELIMITER //
create procedure atualizar_infracao(p_id int, descricao VARCHAR(255), gravidade ENUM('Leve', 'Média', 'Grave', 'Gravíssima'), data_ocorrencia DATE, veiculo_id INT)
begin
	update infracoes
    set descricao = descricao,
    gravidade = gravidade,
    data_ocorrencia = data_ocorrencia,
    veiculo_id = veiculo_id
    where id = p_id;
end
// DELIMITER ;

call inserir_infracao('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'Grave', curdate(), 5);
call atualizar_infracao(14, 'Transitar pela contramão em vias com duplo sentido de circulação;', 'Grave', curdate(), 5);
select * from infracoes;


-- Deletar uma infração ------------------------------------------------------------------------------------------------------------------
DELIMITER //
create procedure deletar_infracao(p_id int)
begin
	delete from infracoes where id = p_id;
end
// DELIMITER ;

call deletar_infracao(12);
select * from infracoes;


-- Selecionar todas as infrações ------------------------------------------------------------------------------------------------------------------
DELIMITER //
create procedure GetInfracoes(p_proprietario int)
begin
	select * 
    
    from infracoes
    inner join veiculos
    on veiculos.id = infracoes.veiculo_id
    inner join proprietarios
    on proprietarios.id = veiculos.proprietario_id
    
    where veiculos.proprietario_id = p_proprietario;
end
// DELIMITER ;

call GetInfracoes(4);


-- Inserir um novo licenciamento ------------------------------------------------------------------------------------------------------------------
DELIMITER //
create procedure inserir_licenciamento(data_validade DATE, veiculo_id INT)
begin
	insert into licenciamentos values(default, data_validade, veiculo_id);
end
// DELIMITER ;

drop procedure inserir_licenciamento;
call inserir_licenciamento('2028-10-10', 5);

select * from licenciamentos;


-- Atualizar informações de um licenciamento ------------------------------------------------------------------------------------------------------------------
DELIMITER //
create procedure atualizar_licenciamento(p_id int, data_validade DATE, veiculo_id INT)
begin
	update licenciamentos
    set data_validade = data_validade,
    veiculo_id = veiculo_id
    where id = p_id;
end
// DELIMITER ;

drop procedure atualizar_licenciamento;

call inserir_licenciamento('1900-02-02', 5);
call atualizar_licenciamento(12, '2009-02-02', 5);
select * from licenciamentos;


-- Selecionar todos os veículos com multas pendentes ------------------------------------------------------------------------------------------------------------------
